/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
package userclasses;

import com.codename1.components.SpanLabel;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.Log;
import com.codename1.io.NetworkManager;
import com.codename1.processing.Result;
import generated.StateMachineBase;
import com.codename1.ui.*;
import com.codename1.ui.events.*;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.Resources;
import com.codename1.xml.Element;
import com.codename1.xml.XMLParser;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Reader;
import java.util.ArrayList;
///HSZ testing


/**
 *
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {

    ArrayList otpvalidation;
    ArrayList otpfyeinfo;

    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }

    /**
     * this method should be used to initialize variables instead of the
     * constructor/class scope to avoid race conditions
     */
    protected void initVars(Resources res) {
    }

//     protected void beforeChangeName(Form f) {
//
//        Picker pickerResolutionDate = (Picker) findByName("resdate", f);
//        pickerResolutionDate.setType(Display.PICKER_TYPE_DATE);
//
//        TextField txtEnt1 = (TextField) findByName("txtyear", f);
//        TextField txtEnt2 = (TextField) findByName("txtbody", f);
//        TextField txtEnt3 = (TextField) findByName("txttype", f);
//
//        nextText(txtEnt1, txtEnt2, 4);
//        nextText(txtEnt2, txtEnt3, 6);
//       
//    }
//    
//    public void nextText(TextField current, TextField next, int limit){
//         current.addDataChangedListener((type, index) -> {
//            if (current.getText().length() == limit) {
//                next.requestFocus();
//                next.startEditing();
//            }
//        });
//    }
    @Override
    protected void onChangeName_BtnValidateAction(Component c, ActionEvent event) {
        try {
            String ent_no = findTxtyear().getText();
            String body = findTxtbody().getText();
            String type = findTxttype().getText();
            String Application_no = findTxtnameno().getText();
            String ResolutionDate = findResdate().getText();
            findTxtyear().getAllStyles().setFgColor(0);
            findTxtyear().setUIID("TEXT");
            findTxtyear().repaint();
            if (ent_no.length() != 4) {
                Dialog.show("Ent Year", "Inavlid Enterprise Year", "OK", null);
                findTxtyear().getAllStyles().setFgColor(0xff0000);
                findTxtyear().setUIID("TextFielderror");
                findTxtyear().repaint();
                findTxtyear().requestFocus();
                findTxtyear().startEditing();
                return;
            }
            findTxtbody().getAllStyles().setFgColor(0);
            findTxtbody().setUIID("TEXT");
            findTxtbody().repaint();
            if (body.length() != 6) {
                Dialog.show("Ent Body", "Inavlid Enterprise Body", "OK", null);
                findTxtbody().getAllStyles().setFgColor(0xff0000);
                findTxtbody().setUIID("TextFielderror");
                findTxtbody().repaint();
                findTxtbody().requestFocus();
                findTxtbody().startEditing();
                return;
            }
            findTxttype().getAllStyles().setFgColor(0);
            findTxttype().setUIID("TEXT");
            findTxttype().repaint();
            if (type.length() != 2) {
                Dialog.show("Ent Body", "Inavlid Enterprise type", "OK", null);
                findTxttype().getAllStyles().setFgColor(0xff0000);
                findTxttype().setUIID("TextFielderror");
                findTxtbody().repaint();
                findTxttype().requestFocus();
                findTxttype().startEditing();
                return;
            }
            findTxtnameno().getAllStyles().setFgColor(0);
            findTxtnameno().setUIID("TEXT");
            findTxtnameno().repaint();
            if (Application_no.length() < 9) {
                findTxtnameno().getAllStyles().setFgColor(0xff0000);
                findTxtnameno().setUIID("TextFielderror");
                findTxtbody().repaint();
                Dialog.show("Name reservation Number", "Inavlid Name Reservation No", "OK", null);
                findTxtnameno().requestFocus();
                findTxtnameno().startEditing();
                return;
            }

            String ent_no_format = ent_no + "/" + body + "/" + type;
            String value = CallSaop(ent_no_format, Application_no, ResolutionDate, "INKE01");
            boolean BContinue;
            if ("ERROR".equals(value.substring(0, 5))) {
                BContinue = Dialog.show("Change of Name", value, "OK", null);
                return;
            } else {
                BContinue = Dialog.show("Change of Name", value, "Continue", "Cancel");
            }

            if (BContinue) {
                String track_no = CallSoapContinue(ent_no_format, Application_no, ResolutionDate, "INKE01");
                Result result = get_otp_info_MOBI(track_no);
                build_form(result);
            } else {
            }
            //end Soap Call
        } catch (IllegalArgumentException err) {
            Dialog.show("Change Name", err.toString(), "OK", null);

        }
    }

    private ArrayList build_form(Result result) {
        try {
            Log.p("Result=" + result);

            XMLParser parser = new XMLParser();
            parser.setCaseSensitive(true);
            Element element = parser.parse(convertStringtoInputStreamReader(result.getAsString("//dataset")));
            otpvalidation = new ArrayList();

            for (int i = 0; i < element.getNumChildren(); i++) {

                Element child = element.getChildAt(i);

                Element elem_id_no = (Element) child.getTextChildren(null, true).get(0);
                String id_no = elem_id_no.getText();

                Element elem_otp = (Element) child.getTextChildren(null, true).get(1);
                String otp = elem_otp.getText();

                Element elem_ent_no = (Element) child.getTextChildren(null, true).get(2);
                String ent_no = elem_ent_no.getText();

                Element elem_first_names = (Element) child.getTextChildren(null, true).get(3);
                String first_names = elem_first_names.getText();

                Element elem_surname = (Element) child.getTextChildren(null, true).get(4);
                String surname = elem_surname.getText();
                OtpInfo otpinfo = new OtpInfo();
                otpinfo.setID(id_no);
                otpinfo.setFirstname(first_names);
                otpinfo.setSurname(surname);
                otpinfo.setOtp(otp);
                otpvalidation.add(otpinfo);

                //Log.p(id_no + ", " + otp + ", " + ent_no + ", " + first_names + ", " + surname);
            }
            showForm("ChangeNameContinue", null);

        } catch (Throwable err) {
            Dialog.show("Change Name", err.toString(), "OK", null);
        }
        return null;
    }

    private ArrayList build_fyeinfo(Result result) {
        try {
            Log.p("Result=" + result);

            XMLParser parser = new XMLParser();
            parser.setCaseSensitive(true);
            Element element = parser.parse(convertStringtoInputStreamReader(result.getAsString("//dataset")));
            otpfyeinfo = new ArrayList();

            for (int i = 0; i < element.getNumChildren(); i++) {
                Element child = element.getChildAt(i);
                Element Evalue = (Element) child.getTextChildren(null, true).get(0);
                String Rvalue = Evalue.getText();

                Element Eent_no_long = (Element) child.getTextChildren(null, true).get(0);
                String ent_no_long = Eent_no_long.getText();

                Element EentNo_year = (Element) child.getTextChildren(null, true).get(1);
                String entNo_year = EentNo_year.getText();

                Element EEntName = (Element) child.getTextChildren(null, true).get(2);
                String EntName = EEntName.getText();

                Element EEntStatus = (Element) child.getTextChildren(null, true).get(3);
                String EntStatus = EEntStatus.getText();

                Element EFYE = (Element) child.getTextChildren(null, true).get(4);
                String FYE = EFYE.getText();

                Element Esreg_date = (Element) child.getTextChildren(null, true).get(5);
                String sreg_date = Esreg_date.getText();

                Element ECurrentFYE = (Element) child.getTextChildren(null, true).get(6);
                String CurrentFYE = ECurrentFYE.getText();

                Element ENextfye = (Element) child.getTextChildren(null, true).get(7);
                String Nextfye = ENextfye.getText();

                Element ES_NonComply = (Element) child.getTextChildren(null, true).get(8);
                String S_NonComply = ES_NonComply.getText();

                Element EPrevious_FYE = (Element) child.getTextChildren(null, true).get(9);
                String Previous_FYE = EPrevious_FYE.getText();

                Element EFYE_Month = (Element) child.getTextChildren(null, true).get(10);
                String FYE_Month = EFYE_Month.getText();
                FyeInfo fyeinfo = new FyeInfo();
                fyeinfo.setCurrentFYE(CurrentFYE);
                fyeinfo.setEntName(EntName);
                fyeinfo.setEntNo_year(entNo_year);
                fyeinfo.setEntStatus(EntStatus);
                fyeinfo.setEnt_no_long(ent_no_long);
                fyeinfo.setFYE(FYE);
                fyeinfo.setFYE_Month(FYE_Month);
                fyeinfo.setNextfye(Nextfye);
                fyeinfo.setPrevious_FYE(Previous_FYE);
                fyeinfo.setRvalue(Rvalue);
                fyeinfo.setS_NonComply(S_NonComply);
                fyeinfo.setSreg_date(sreg_date);
                otpfyeinfo.add(fyeinfo);
                //Log.p(id_no + ", " + otp + ", " + ent_no + ", " + first_names + ", " + surname);
            }
            //showForm("ChangeNameContinue", null);
            return otpfyeinfo;
        } catch (Throwable err) {
            Dialog.show("Change Name", err.toString(), "OK", null);
        }
        return null;
    }

    private static InputStreamReader convertStringtoInputStreamReader(String data) {

        byte[] resultByte = data.getBytes();
        ByteArrayInputStream bis = new ByteArrayInputStream(resultByte);
        InputStreamReader is = new InputStreamReader(bis);
        return is;

    }

    public Result get_otp_info_MOBI(String trak_no) {

        final String SOAP_BODY
                = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cipc=\"CIPC_WEB_SERVICES\">\n"
                + "   <soapenv:Header/>\n"
                + "   <soapenv:Body>\n"
                + "      <cipc:get_otp_info_MOBI>\n"
                + "           <cipc:sUserName>wBAA7LAkWIs=</cipc:sUserName>\n"
                + "         <cipc:sPassword>nhXSFLH3xKlrDYYKEWHlVw==</cipc:sPassword>\n"
                + "         <cipc:sBankID>wBAA7LAkWIs=</cipc:sBankID>\n"
                + "         <cipc:Sent_no>K2016186748</cipc:Sent_no>\n"
                + "         <cipc:track_no>" + trak_no + "</cipc:track_no>\n"
                + "      </cipc:get_otp_info_MOBI>\n"
                + "   </soapenv:Body>\n"
                + "</soapenv:Envelope>";

        ConnectionRequest httpRequest = new ConnectionRequest() {
            Element h;

            @Override
            protected void buildRequestBody(OutputStream os) throws IOException {
                super.buildRequestBody(os);
                os.write(SOAP_BODY.getBytes("utf-8"));
            }

            protected void postResponse() {
                super.postResponse();
            }

            protected void readResponse(InputStream input) throws IOException {
                super.readResponse(input);
            }

        };

        httpRequest.setUrl("https://testwebservices4.cipc.co.za/enterprise.asmx?wsdl");
        httpRequest.addRequestHeader("Content-Type", "text/xml; charset=utf-8");
        httpRequest.addRequestHeader("Content-Length", SOAP_BODY.length() + "");
        httpRequest.setPost(true);
        NetworkManager.getInstance().setTimeout(60000);
        NetworkManager.getInstance().addToQueueAndWait(httpRequest);
        String data = new String(httpRequest.getResponseData());
        Result result = Result.fromContent(data, Result.XML);
        return result;
    }

    private String CallSaop(String ent_no_format, String Application_no, String ResolutionDate, String agentcode) throws IllegalArgumentException {
        //Call Soap
        final String SOAP_BODY = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cipc=\"CIPC_WEB_SERVICES\">\n"
                + "   <soapenv:Header/>\n"
                + "   <soapenv:Body>\n"
                + "      <cipc:Change_name_MOBI>\n"
                + "         <cipc:sUserName>wBAA7LAkWIs=</cipc:sUserName>\n"
                + "         <cipc:sPassword>nhXSFLH3xKlrDYYKEWHlVw==</cipc:sPassword>\n"
                + "         <cipc:sBankID>wBAA7LAkWIs=</cipc:sBankID>\n"
                + "         <cipc:Sent_no>" + ent_no_format + "</cipc:Sent_no>\n"
                + "         <cipc:Apllication_no>" + Application_no + "</cipc:Apllication_no>\n"
                + "         <cipc:resolution_date>" + ResolutionDate + "</cipc:resolution_date>\n"
                + "         <cipc:scustcode>" + agentcode + "</cipc:scustcode>\n"
                + "      </cipc:Change_name_MOBI>\n"
                + "   </soapenv:Body>\n"
                + "</soapenv:Envelope>";

        ConnectionRequest connectionRequest = new ConnectionRequest() {

            @Override
            protected void buildRequestBody(OutputStream os) throws IOException {
                super.buildRequestBody(os);

                os.write(SOAP_BODY.getBytes("utf-8"));
            }
        };

        connectionRequest.setUrl("https://testwebservices4.cipc.co.za/enterprise.asmx?wsdl");
        connectionRequest.setPost(true);
        connectionRequest.addRequestHeader("Content-Type", "text/xml; charset=utf-8");
        connectionRequest.addRequestHeader("Content-Length", SOAP_BODY.length() + "");
        NetworkManager.getInstance().setTimeout(60000);
        NetworkManager.getInstance().addToQueueAndWait(connectionRequest);

        byte[] data = connectionRequest.getResponseData();
        String stringData = "";
        if (data != null) {
            stringData = new String(data);
            Log.p("The string is: " + stringData);

            Result result = Result.fromContent(stringData, Result.XML);

            String value = result.getAsString("//change_name_mobiresult");
            return value;
        }
        return null;
    }

    private String CallSoapContinue(String ent_no_format, String Application_no, String ResolutionDate, String agentcode) throws IllegalArgumentException {
        //Call Soap
        final String SOAP_BODY = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cipc=\"CIPC_WEB_SERVICES\">\n"
                + "   <soapenv:Header/>\n"
                + "   <soapenv:Body>\n"
                + "      <cipc:Change_name_MOBI_continue>\n"
                + "           <cipc:sUserName>wBAA7LAkWIs=</cipc:sUserName>\n"
                + "         <cipc:sPassword>nhXSFLH3xKlrDYYKEWHlVw==</cipc:sPassword>\n"
                + "         <cipc:sBankID>wBAA7LAkWIs=</cipc:sBankID>\n"
                + "         <cipc:Sent_no>" + ent_no_format + "</cipc:Sent_no>\n"
                + "         <cipc:Apllication_no>" + Application_no + "</cipc:Apllication_no>\n"
                + "         <cipc:resolution_date>" + ResolutionDate + "</cipc:resolution_date>\n"
                + "         <cipc:scustcode>" + agentcode + "</cipc:scustcode>\n"
                + "      </cipc:Change_name_MOBI_continue>\n"
                + "   </soapenv:Body>\n"
                + "</soapenv:Envelope>";

        ConnectionRequest connectionRequest = new ConnectionRequest() {

            @Override
            protected void buildRequestBody(OutputStream os) throws IOException {
                super.buildRequestBody(os);

                os.write(SOAP_BODY.getBytes("utf-8"));
            }
        };

        connectionRequest.setUrl("https://testwebservices4.cipc.co.za/enterprise.asmx?wsdl");
        connectionRequest.setPost(true);
        connectionRequest.addRequestHeader("Content-Type", "text/xml; charset=utf-8");
        connectionRequest.addRequestHeader("Content-Length", SOAP_BODY.length() + "");
        NetworkManager.getInstance().setTimeout(60000);
        NetworkManager.getInstance().addToQueueAndWait(connectionRequest);
        byte[] data = connectionRequest.getResponseData();
        String stringData = "";
        if (data != null) {
            stringData = new String(data);
            Log.p("The string is: " + stringData);
            Result result = Result.fromContent(stringData, Result.XML);
            String value = result.getAsString("//Change_name_MOBI_continueResult");
            return value;
        }
        return null;
    }

    private String RSM(String name) {
        name = name.trim();
        name = name.substring(1);
        name = name.substring(0, name.length() - 1);

        return name;
    }

    @Override
    protected void beforeChangeNameContinue(Form f) {
        Log.p(otpvalidation.size() + "");
        for (int i = 0; i < otpvalidation.size(); i++) {
            OtpInfo otpinfo = (OtpInfo) otpvalidation.get(i);
            Container container = new Container();
            Label name = new Label(RSM(otpinfo.getFirstname()));
            Label surname = new Label(RSM(otpinfo.getSurname()));
            TextField otp = new TextField("");
            otp.setName(RSM(otpinfo.getOtp()));
            otp.setHint("OTP");
            container.add(name).add(surname).add(otp);
            f.add(container);
        }
        Button buttonotp = new Button("Validate OTP");
        buttonotp.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                Container contentpane = f.getContentPane();
                boolean valid = true;
                Log.p(contentpane.getComponentCount() + "");
                for (int i = 0; i < contentpane.getComponentCount() - 1; i++) {
                    Container obj = (Container) contentpane.getComponentAt(i);
                    TextField txtfield = (TextField) obj.getComponentAt(2);
                    if (!txtfield.getText().equals(txtfield.getName())) {
                        valid = false;
                    }
                }
                Dialog.show("OTP Validation", valid + "", "OK", null);
            }
        });
        f.add(buttonotp);
    }

    public Result get_fyeinfo_MOBI(String syear, String sbody, String stype) {

        final String SOAP_BODY
                = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cipc=\"CIPC_WEB_SERVICES\">\n"
                + "   <soapenv:Header/>\n"
                + "   <soapenv:Body>\n"
                + "      <cipc:Validate_FYE_EN_NO>\n"
                + "        <cipc:sUserName>wBAA7LAkWIs=</cipc:sUserName>\n"
                + "         <cipc:sPassword>nhXSFLH3xKlrDYYKEWHlVw==</cipc:sPassword>\n"
                + "         <cipc:sBankID>wBAA7LAkWIs=</cipc:sBankID>\n"
                + "         <cipc:Syear>" + syear + "</cipc:Syear>\n"
                + "         <cipc:sbody>" + sbody + "</cipc:sbody>\n"
                + "         <cipc:stype>" + stype + "</cipc:stype>\n"
                + "      </cipc:Validate_FYE_EN_NO>\n"
                + "   </soapenv:Body>\n"
                + "</soapenv:Envelope>";

        ConnectionRequest httpRequest = new ConnectionRequest() {
            Element h;

            @Override
            protected void buildRequestBody(OutputStream os) throws IOException {
                super.buildRequestBody(os);
                os.write(SOAP_BODY.getBytes("utf-8"));
            }

            protected void postResponse() {
                super.postResponse();
            }

            protected void readResponse(InputStream input) throws IOException {
                super.readResponse(input);
            }

        };

        httpRequest.setUrl("https://testwebservices4.cipc.co.za/enterprise.asmx?wsdl");
        httpRequest.addRequestHeader("Content-Type", "text/xml; charset=utf-8");
        httpRequest.addRequestHeader("Content-Length", SOAP_BODY.length() + "");
        httpRequest.setPost(true);
        NetworkManager.getInstance().setTimeout(60000);
        NetworkManager.getInstance().addToQueueAndWait(httpRequest);
        String data = new String(httpRequest.getResponseData());
        Result result = Result.fromContent(data, Result.XML);
        return result;
    }

    protected void onChangeFYE_BtnValNumberAction(Component c, ActionEvent event) {

        String ent_no = findTxtyear().getText();
        String body = findTxtbody().getText();
        String type = findTxttype().getText();

        Result FYEData = get_fyeinfo_MOBI(ent_no, body, type);

        Form f = c.getComponentForm();
        ArrayList display = new ArrayList();
        display = build_fyeinfo(FYEData);
        Log.p(display.size() + "");
        for (int i = 0; i < display.size(); i++) {
            FyeInfo fyeinfo = (FyeInfo) display.get(i);
            //Container3 container = new Container3();
            Container container = new Container();
            container.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
//            Label LRvalue = new Label(RSM("FYEINFO:"));
            //Label Rvalue = new Label(RSM( fyeinfo.getRvalue()));
            //Rvalue.setUIID("labelMOBI");
            //Rvalue.repaint();
//            Label Lent_no_long = new Label("Ent No:");
//            Label ent_no_long = new Label(RSM(fyeinfo.getEnt_no_long()));
//            ent_no_long.setUIID("TextFieldMOBI");
//            ent_no_long.repaint();
//            container.add(Lent_no_long);
//            container.add(ent_no_long);
            //Label entNo_year = new Label(RSM(fyeinfo.getEntNo_year()));

            Label LEntName = new Label("Ent Name:");
            Label EntName = new Label(RSM(fyeinfo.getEntName()));
            container.add(LEntName);
            container.add(EntName);
            LEntName.setUIID("Labelgreen");
            LEntName.repaint();

            Label LEntStatus = new Label("Ent Status:");
            Label EntStatus = new Label(RSM(fyeinfo.getEntStatus()));
            container.add(LEntStatus);
            container.add(EntStatus);
            LEntStatus.setUIID("Labelgreen");
            LEntStatus.repaint();

            Label LFYE = new Label("Current FYE:");
            Label FYE = new Label(RSM(fyeinfo.getFYE()));
            container.add(LFYE);
            container.add(FYE);
            LFYE.setUIID("Labelgreen");
            LFYE.repaint();

            Label Lsreg_date = new Label("Reg Date:");
            Label sreg_date = new Label(RSM( fyeinfo.getSreg_date()));
            container.add(Lsreg_date);
            container.add(sreg_date);
            Lsreg_date.setUIID("Labelgreen");
            Lsreg_date.repaint();
            
            Label LCurrentFYE = new Label("Current FYE:");
            Label CurrentFYE = new Label(RSM( fyeinfo.getNextfye()));
            container.add(LCurrentFYE);
            container.add(CurrentFYE);
            LCurrentFYE.setUIID("Labelgreen");
            LCurrentFYE.repaint();
            
            Label LNextfye = new Label("Next FYE:");
            Label Nextfye = new Label(RSM( fyeinfo.getNextfye()));
            container.add(LNextfye);
            container.add(Nextfye);
            LNextfye.setUIID("Labelgreen");
            LNextfye.repaint();
            
            
            Label LS_NonComply = new Label("Ent Status B:" );
            Label S_NonComply = new Label(RSM( fyeinfo.getS_NonComply()));
            container.add(LS_NonComply);
            container.add(S_NonComply);
            LS_NonComply.setUIID("Labelgreen");
            LS_NonComply.repaint();
            
            
            Label LPrevious_FYE = new Label("Prev FYE:");
            Label Previous_FYE = new Label(RSM( fyeinfo.getPrevious_FYE()));
            container.add(LPrevious_FYE);
            container.add(Previous_FYE);
            LPrevious_FYE.setUIID("Labelgreen");
            LPrevious_FYE.repaint();
            
            Label LFYE_Month = new Label("FYE Month:");
            Label FYE_Month = new Label(RSM( fyeinfo.getFYE_Month()));
            container.add(LFYE_Month);
            container.add(FYE_Month);
            LFYE_Month.setUIID("Labelgreen");
            LFYE_Month.repaint();
            //container.add(Lent_no_long).add(ent_no_long).add(LEntName).add(EntName).add(EntStatus).add(FYE);
            //container.add(sreg_date).add(CurrentFYE).add(Nextfye).add(S_NonComply);
            //container.add(Previous_FYE).add(FYE_Month).add(Rvalue);
            f.add(container);
            container.repaint();
            f.repaint();
//            Rvalue.setUIID("TextFieldMOBI");
//            Rvalue.repaint();

        }
        Button buttonotp = new Button("Validate OTP");
//        buttonotp.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                Container contentpane = f.getContentPane();
//                boolean valid = true;
//                Log.p(contentpane.getComponentCount() + "");
//                for (int i = 0; i < contentpane.getComponentCount() - 1; i++) {
//                    Container obj = (Container) contentpane.getComponentAt(i);
//                    TextField txtfield = (TextField) obj.getComponentAt(2);
//                    if (!txtfield.getText().equals(txtfield.getName())) {
//                        valid = false;
//                    }
//                }
//                Dialog.show("OTP Validation", valid + "", "OK", null);
//            }
//        });
        f.add(buttonotp);
        f.repaint();
    }

   
    protected void onCreateCoRegistration() {
    Tabs t = new Tabs();
        com.codename1.ui.plaf.Style s = UIManager.getInstance().getComponentStyle("Tab");
FontImage icon1 = FontImage.createMaterial(FontImage.MATERIAL_QUESTION_ANSWER, s);

Container container1 = BoxLayout.encloseY(new Label("Label1"), new Label("Label2"));
t.addTab("Tab1", icon1, container1);
t.addTab("Tab2", new SpanLabel("Some text directly in the tab"));
//Component c = new Component();
 Form f = new Form();
 f.add(t);
 f.repaint();
    }

   

  

   
}

        